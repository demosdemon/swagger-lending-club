/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountsApiTests
    {
        private AccountsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountsApi
            //Assert.IsInstanceOfType(typeof(AccountsApi), instance, "instance is a AccountsApi");
        }

        
        /// <summary>
        /// Test AvailableCash
        /// </summary>
        [Test]
        public void AvailableCashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //var response = instance.AvailableCash(investor);
            //Assert.IsInstanceOf<AvailableCash> (response, "response is AvailableCash");
        }
        
        /// <summary>
        /// Test CreatePortfolio
        /// </summary>
        [Test]
        public void CreatePortfolioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreatePortfolioRequest request = null;
            //var response = instance.CreatePortfolio(request);
            //Assert.IsInstanceOf<Portfolio> (response, "response is Portfolio");
        }
        
        /// <summary>
        /// Test DetailedNotesOwned
        /// </summary>
        [Test]
        public void DetailedNotesOwnedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //string X_LC_DETAILED_NOTES_VERSION = null;
            //var response = instance.DetailedNotesOwned(investor, X_LC_DETAILED_NOTES_VERSION);
            //Assert.IsInstanceOf<DetailedNotesOwned> (response, "response is DetailedNotesOwned");
        }
        
        /// <summary>
        /// Test Filters
        /// </summary>
        [Test]
        public void FiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //var response = instance.Filters(investor);
            //Assert.IsInstanceOf<List<Filter>> (response, "response is List<Filter>");
        }
        
        /// <summary>
        /// Test FundsAdd
        /// </summary>
        [Test]
        public void FundsAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //ScheduledTransfer request = null;
            //var response = instance.FundsAdd(investor, request);
            //Assert.IsInstanceOf<ScheduledTransfer> (response, "response is ScheduledTransfer");
        }
        
        /// <summary>
        /// Test FundsCancel
        /// </summary>
        [Test]
        public void FundsCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //CancelTransferRequest request = null;
            //var response = instance.FundsCancel(investor, request);
            //Assert.IsInstanceOf<CancelTransferResponse> (response, "response is CancelTransferResponse");
        }
        
        /// <summary>
        /// Test FundsPending
        /// </summary>
        [Test]
        public void FundsPendingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //var response = instance.FundsPending(investor);
            //Assert.IsInstanceOf<Transfers> (response, "response is Transfers");
        }
        
        /// <summary>
        /// Test FundsWithdraw
        /// </summary>
        [Test]
        public void FundsWithdrawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //ScheduledTransfer request = null;
            //var response = instance.FundsWithdraw(investor, request);
            //Assert.IsInstanceOf<ScheduledTransfer> (response, "response is ScheduledTransfer");
        }
        
        /// <summary>
        /// Test NotesOwned
        /// </summary>
        [Test]
        public void NotesOwnedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //var response = instance.NotesOwned(investor);
            //Assert.IsInstanceOf<NotesOwned> (response, "response is NotesOwned");
        }
        
        /// <summary>
        /// Test PortfoliosOwned
        /// </summary>
        [Test]
        public void PortfoliosOwnedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //var response = instance.PortfoliosOwned(investor);
            //Assert.IsInstanceOf<PortfoliosOwned> (response, "response is PortfoliosOwned");
        }
        
        /// <summary>
        /// Test SubmitOrder
        /// </summary>
        [Test]
        public void SubmitOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //SubmitOrderRequest orders = null;
            //var response = instance.SubmitOrder(investor, orders);
            //Assert.IsInstanceOf<SubmitOrderResponse> (response, "response is SubmitOrderResponse");
        }
        
        /// <summary>
        /// Test Summary
        /// </summary>
        [Test]
        public void SummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? investor = null;
            //var response = instance.Summary(investor);
            //Assert.IsInstanceOf<AccountSummary> (response, "response is AccountSummary");
        }
        
    }

}
