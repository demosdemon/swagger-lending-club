/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewOrder
    /// </summary>
    [DataContract]
    public partial class NewOrder :  IEquatable<NewOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewOrder" /> class.
        /// </summary>
        /// <param name="LoadId">LoadId.</param>
        /// <param name="RequestedAmount">RequestedAmount (required).</param>
        /// <param name="PortfolioId">PortfolioId.</param>
        public NewOrder(int? LoadId = default(int?), decimal? RequestedAmount = default(decimal?), int? PortfolioId = default(int?))
        {
            // to ensure "RequestedAmount" is required (not null)
            if (RequestedAmount == null)
            {
                throw new InvalidDataException("RequestedAmount is a required property for NewOrder and cannot be null");
            }
            else
            {
                this.RequestedAmount = RequestedAmount;
            }
            this.LoadId = LoadId;
            this.PortfolioId = PortfolioId;
        }
        
        /// <summary>
        /// Gets or Sets LoadId
        /// </summary>
        [DataMember(Name="loadId", EmitDefaultValue=false)]
        public int? LoadId { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAmount
        /// </summary>
        [DataMember(Name="requestedAmount", EmitDefaultValue=false)]
        public decimal? RequestedAmount { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name="portfolioId", EmitDefaultValue=false)]
        public int? PortfolioId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewOrder {\n");
            sb.Append("  LoadId: ").Append(LoadId).Append("\n");
            sb.Append("  RequestedAmount: ").Append(RequestedAmount).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewOrder);
        }

        /// <summary>
        /// Returns true if NewOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of NewOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoadId == input.LoadId ||
                    (this.LoadId != null &&
                    this.LoadId.Equals(input.LoadId))
                ) && 
                (
                    this.RequestedAmount == input.RequestedAmount ||
                    (this.RequestedAmount != null &&
                    this.RequestedAmount.Equals(input.RequestedAmount))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoadId != null)
                    hashCode = hashCode * 59 + this.LoadId.GetHashCode();
                if (this.RequestedAmount != null)
                    hashCode = hashCode * 59 + this.RequestedAmount.GetHashCode();
                if (this.PortfolioId != null)
                    hashCode = hashCode * 59 + this.PortfolioId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
