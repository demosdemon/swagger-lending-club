/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OrderStatus
    /// </summary>
    [DataContract]
    public partial class OrderStatus :  IEquatable<OrderStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatus" /> class.
        /// </summary>
        /// <param name="LoanId">LoanId.</param>
        /// <param name="RequestedAmount">RequestedAmount.</param>
        /// <param name="InvestedAmount">InvestedAmount.</param>
        /// <param name="ExecutionStatus">ExecutionStatus.</param>
        public OrderStatus(int? LoanId = default(int?), decimal? RequestedAmount = default(decimal?), decimal? InvestedAmount = default(decimal?), List<ExecutionStatus> ExecutionStatus = default(List<ExecutionStatus>))
        {
            this.LoanId = LoanId;
            this.RequestedAmount = RequestedAmount;
            this.InvestedAmount = InvestedAmount;
            this.ExecutionStatus = ExecutionStatus;
        }
        
        /// <summary>
        /// Gets or Sets LoanId
        /// </summary>
        [DataMember(Name="loanId", EmitDefaultValue=false)]
        public int? LoanId { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAmount
        /// </summary>
        [DataMember(Name="requestedAmount", EmitDefaultValue=false)]
        public decimal? RequestedAmount { get; set; }

        /// <summary>
        /// Gets or Sets InvestedAmount
        /// </summary>
        [DataMember(Name="investedAmount", EmitDefaultValue=false)]
        public decimal? InvestedAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionStatus
        /// </summary>
        [DataMember(Name="executionStatus", EmitDefaultValue=false)]
        public List<ExecutionStatus> ExecutionStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderStatus {\n");
            sb.Append("  LoanId: ").Append(LoanId).Append("\n");
            sb.Append("  RequestedAmount: ").Append(RequestedAmount).Append("\n");
            sb.Append("  InvestedAmount: ").Append(InvestedAmount).Append("\n");
            sb.Append("  ExecutionStatus: ").Append(ExecutionStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderStatus);
        }

        /// <summary>
        /// Returns true if OrderStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanId == input.LoanId ||
                    (this.LoanId != null &&
                    this.LoanId.Equals(input.LoanId))
                ) && 
                (
                    this.RequestedAmount == input.RequestedAmount ||
                    (this.RequestedAmount != null &&
                    this.RequestedAmount.Equals(input.RequestedAmount))
                ) && 
                (
                    this.InvestedAmount == input.InvestedAmount ||
                    (this.InvestedAmount != null &&
                    this.InvestedAmount.Equals(input.InvestedAmount))
                ) && 
                (
                    this.ExecutionStatus == input.ExecutionStatus ||
                    this.ExecutionStatus != null &&
                    this.ExecutionStatus.SequenceEqual(input.ExecutionStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanId != null)
                    hashCode = hashCode * 59 + this.LoanId.GetHashCode();
                if (this.RequestedAmount != null)
                    hashCode = hashCode * 59 + this.RequestedAmount.GetHashCode();
                if (this.InvestedAmount != null)
                    hashCode = hashCode * 59 + this.InvestedAmount.GetHashCode();
                if (this.ExecutionStatus != null)
                    hashCode = hashCode * 59 + this.ExecutionStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
