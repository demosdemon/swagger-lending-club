/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ScheduledTransfer
    /// </summary>
    [DataContract]
    public partial class ScheduledTransfer :  IEquatable<ScheduledTransfer>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TransferFrequency
        /// </summary>
        [DataMember(Name="transferFrequency", EmitDefaultValue=false)]
        public TransferFrequency? TransferFrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledTransfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduledTransfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledTransfer" /> class.
        /// </summary>
        /// <param name="Amount">Add Fund amount (required).</param>
        /// <param name="TransferFrequency">TransferFrequency.</param>
        /// <param name="StartDate">Required if transferFrequency !&#x3D; LOAD_NOW.</param>
        /// <param name="EndDate">Recurring transfer end date.</param>
        public ScheduledTransfer(decimal? Amount = default(decimal?), TransferFrequency? TransferFrequency = default(TransferFrequency?), DateTime? StartDate = default(DateTime?), DateTime? EndDate = default(DateTime?))
        {
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for ScheduledTransfer and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            this.TransferFrequency = TransferFrequency;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
        }
        
        /// <summary>
        /// The id of the investor account
        /// </summary>
        /// <value>The id of the investor account</value>
        [DataMember(Name="investorId", EmitDefaultValue=false)]
        public int? InvestorId { get; private set; }

        /// <summary>
        /// Add Fund amount
        /// </summary>
        /// <value>Add Fund amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }


        /// <summary>
        /// Required if transferFrequency !&#x3D; LOAD_NOW
        /// </summary>
        /// <value>Required if transferFrequency !&#x3D; LOAD_NOW</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Recurring transfer end date
        /// </summary>
        /// <value>Recurring transfer end date</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Estimated funds transfer start date
        /// </summary>
        /// <value>Estimated funds transfer start date</value>
        [DataMember(Name="estimatedFundsTransferDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EstimatedFundsTransferDate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduledTransfer {\n");
            sb.Append("  InvestorId: ").Append(InvestorId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TransferFrequency: ").Append(TransferFrequency).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EstimatedFundsTransferDate: ").Append(EstimatedFundsTransferDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduledTransfer);
        }

        /// <summary>
        /// Returns true if ScheduledTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduledTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduledTransfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvestorId == input.InvestorId ||
                    (this.InvestorId != null &&
                    this.InvestorId.Equals(input.InvestorId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.TransferFrequency == input.TransferFrequency ||
                    (this.TransferFrequency != null &&
                    this.TransferFrequency.Equals(input.TransferFrequency))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EstimatedFundsTransferDate == input.EstimatedFundsTransferDate ||
                    (this.EstimatedFundsTransferDate != null &&
                    this.EstimatedFundsTransferDate.Equals(input.EstimatedFundsTransferDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvestorId != null)
                    hashCode = hashCode * 59 + this.InvestorId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.TransferFrequency != null)
                    hashCode = hashCode * 59 + this.TransferFrequency.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EstimatedFundsTransferDate != null)
                    hashCode = hashCode * 59 + this.EstimatedFundsTransferDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
