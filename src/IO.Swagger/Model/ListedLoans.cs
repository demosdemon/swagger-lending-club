/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ListedLoans
    /// </summary>
    [DataContract]
    public partial class ListedLoans :  IEquatable<ListedLoans>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListedLoans" /> class.
        /// </summary>
        /// <param name="AsOfDate">AsOfDate.</param>
        /// <param name="Loans">Loans.</param>
        public ListedLoans(DateTime? AsOfDate = default(DateTime?), List<ListedLoan> Loans = default(List<ListedLoan>))
        {
            this.AsOfDate = AsOfDate;
            this.Loans = Loans;
        }
        
        /// <summary>
        /// Gets or Sets AsOfDate
        /// </summary>
        [DataMember(Name="asOfDate", EmitDefaultValue=false)]
        public DateTime? AsOfDate { get; set; }

        /// <summary>
        /// Gets or Sets Loans
        /// </summary>
        [DataMember(Name="loans", EmitDefaultValue=false)]
        public List<ListedLoan> Loans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListedLoans {\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  Loans: ").Append(Loans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListedLoans);
        }

        /// <summary>
        /// Returns true if ListedLoans instances are equal
        /// </summary>
        /// <param name="input">Instance of ListedLoans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListedLoans input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AsOfDate == input.AsOfDate ||
                    (this.AsOfDate != null &&
                    this.AsOfDate.Equals(input.AsOfDate))
                ) && 
                (
                    this.Loans == input.Loans ||
                    this.Loans != null &&
                    this.Loans.SequenceEqual(input.Loans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsOfDate != null)
                    hashCode = hashCode * 59 + this.AsOfDate.GetHashCode();
                if (this.Loans != null)
                    hashCode = hashCode * 59 + this.Loans.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
