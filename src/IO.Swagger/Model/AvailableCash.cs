/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AvailableCash
    /// </summary>
    [DataContract]
    public partial class AvailableCash :  IEquatable<AvailableCash>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableCash" /> class.
        /// </summary>
        /// <param name="InvestorId">The id of the investor account.</param>
        /// <param name="_AvailableCash">Available cash amount.</param>
        public AvailableCash(int? InvestorId = default(int?), decimal? _AvailableCash = default(decimal?))
        {
            this.InvestorId = InvestorId;
            this._AvailableCash = _AvailableCash;
        }
        
        /// <summary>
        /// The id of the investor account
        /// </summary>
        /// <value>The id of the investor account</value>
        [DataMember(Name="investorId", EmitDefaultValue=false)]
        public int? InvestorId { get; set; }

        /// <summary>
        /// Available cash amount
        /// </summary>
        /// <value>Available cash amount</value>
        [DataMember(Name="availableCash", EmitDefaultValue=false)]
        public decimal? _AvailableCash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailableCash {\n");
            sb.Append("  InvestorId: ").Append(InvestorId).Append("\n");
            sb.Append("  _AvailableCash: ").Append(_AvailableCash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailableCash);
        }

        /// <summary>
        /// Returns true if AvailableCash instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailableCash to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableCash input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvestorId == input.InvestorId ||
                    (this.InvestorId != null &&
                    this.InvestorId.Equals(input.InvestorId))
                ) && 
                (
                    this._AvailableCash == input._AvailableCash ||
                    (this._AvailableCash != null &&
                    this._AvailableCash.Equals(input._AvailableCash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvestorId != null)
                    hashCode = hashCode * 59 + this.InvestorId.GetHashCode();
                if (this._AvailableCash != null)
                    hashCode = hashCode * 59 + this._AvailableCash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
