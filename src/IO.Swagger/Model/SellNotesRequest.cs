/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SellNotesRequest
    /// </summary>
    [DataContract]
    public partial class SellNotesRequest :  IEquatable<SellNotesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SellNotesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SellNotesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellNotesRequest" /> class.
        /// </summary>
        /// <param name="Aid">The investor id (required).</param>
        /// <param name="ExpireDate">ExpireDate (required).</param>
        /// <param name="Notes">Notes (required).</param>
        public SellNotesRequest(int? Aid = default(int?), DateTime? ExpireDate = default(DateTime?), List<SellNote> Notes = default(List<SellNote>))
        {
            // to ensure "Aid" is required (not null)
            if (Aid == null)
            {
                throw new InvalidDataException("Aid is a required property for SellNotesRequest and cannot be null");
            }
            else
            {
                this.Aid = Aid;
            }
            // to ensure "ExpireDate" is required (not null)
            if (ExpireDate == null)
            {
                throw new InvalidDataException("ExpireDate is a required property for SellNotesRequest and cannot be null");
            }
            else
            {
                this.ExpireDate = ExpireDate;
            }
            // to ensure "Notes" is required (not null)
            if (Notes == null)
            {
                throw new InvalidDataException("Notes is a required property for SellNotesRequest and cannot be null");
            }
            else
            {
                this.Notes = Notes;
            }
        }
        
        /// <summary>
        /// The investor id
        /// </summary>
        /// <value>The investor id</value>
        [DataMember(Name="aid", EmitDefaultValue=false)]
        public int? Aid { get; set; }

        /// <summary>
        /// Gets or Sets ExpireDate
        /// </summary>
        [DataMember(Name="expireDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpireDate { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<SellNote> Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SellNotesRequest {\n");
            sb.Append("  Aid: ").Append(Aid).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SellNotesRequest);
        }

        /// <summary>
        /// Returns true if SellNotesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SellNotesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellNotesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aid == input.Aid ||
                    (this.Aid != null &&
                    this.Aid.Equals(input.Aid))
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aid != null)
                    hashCode = hashCode * 59 + this.Aid.GetHashCode();
                if (this.ExpireDate != null)
                    hashCode = hashCode * 59 + this.ExpireDate.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
