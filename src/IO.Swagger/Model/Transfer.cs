/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Transfer
    /// </summary>
    [DataContract]
    public partial class Transfer :  IEquatable<Transfer>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public TransferFrequency? Frequency { get; set; }
        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationEnum
        {
            
            /// <summary>
            /// Enum ADDFUNDS for "ADD_FUNDS"
            /// </summary>
            [EnumMember(Value = "ADD_FUNDS")]
            ADDFUNDS = 1,
            
            /// <summary>
            /// Enum WITHDRAWFUNDS for "WITHDRAW_FUNDS"
            /// </summary>
            [EnumMember(Value = "WITHDRAW_FUNDS")]
            WITHDRAWFUNDS = 2
        }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public OperationEnum? Operation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transfer" /> class.
        /// </summary>
        /// <param name="TransferId">Transfer transaction id.</param>
        /// <param name="TransferDate">Transfer scheduled date.</param>
        /// <param name="Amount">Transfer amount.</param>
        /// <param name="SourceAccount">Transfer source account.</param>
        /// <param name="Status">Status of the scheduled transfer.</param>
        /// <param name="Frequency">Frequency.</param>
        /// <param name="EndDate">Recurring transfer end date.</param>
        /// <param name="Operation">Operation.</param>
        /// <param name="Cancellable">Cancellable.</param>
        public Transfer(int? TransferId = default(int?), DateTime? TransferDate = default(DateTime?), decimal? Amount = default(decimal?), string SourceAccount = default(string), string Status = default(string), TransferFrequency? Frequency = default(TransferFrequency?), DateTime? EndDate = default(DateTime?), OperationEnum? Operation = default(OperationEnum?), bool? Cancellable = default(bool?))
        {
            this.TransferId = TransferId;
            this.TransferDate = TransferDate;
            this.Amount = Amount;
            this.SourceAccount = SourceAccount;
            this.Status = Status;
            this.Frequency = Frequency;
            this.EndDate = EndDate;
            this.Operation = Operation;
            this.Cancellable = Cancellable;
        }
        
        /// <summary>
        /// Transfer transaction id
        /// </summary>
        /// <value>Transfer transaction id</value>
        [DataMember(Name="transferId", EmitDefaultValue=false)]
        public int? TransferId { get; set; }

        /// <summary>
        /// Transfer scheduled date
        /// </summary>
        /// <value>Transfer scheduled date</value>
        [DataMember(Name="transferDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TransferDate { get; set; }

        /// <summary>
        /// Transfer amount
        /// </summary>
        /// <value>Transfer amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Transfer source account
        /// </summary>
        /// <value>Transfer source account</value>
        [DataMember(Name="sourceAccount", EmitDefaultValue=false)]
        public string SourceAccount { get; set; }

        /// <summary>
        /// Status of the scheduled transfer
        /// </summary>
        /// <value>Status of the scheduled transfer</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }


        /// <summary>
        /// Recurring transfer end date
        /// </summary>
        /// <value>Recurring transfer end date</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }


        /// <summary>
        /// Gets or Sets Cancellable
        /// </summary>
        [DataMember(Name="cancellable", EmitDefaultValue=false)]
        public bool? Cancellable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transfer {\n");
            sb.Append("  TransferId: ").Append(TransferId).Append("\n");
            sb.Append("  TransferDate: ").Append(TransferDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SourceAccount: ").Append(SourceAccount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Cancellable: ").Append(Cancellable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transfer);
        }

        /// <summary>
        /// Returns true if Transfer instances are equal
        /// </summary>
        /// <param name="input">Instance of Transfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransferId == input.TransferId ||
                    (this.TransferId != null &&
                    this.TransferId.Equals(input.TransferId))
                ) && 
                (
                    this.TransferDate == input.TransferDate ||
                    (this.TransferDate != null &&
                    this.TransferDate.Equals(input.TransferDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.SourceAccount == input.SourceAccount ||
                    (this.SourceAccount != null &&
                    this.SourceAccount.Equals(input.SourceAccount))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.Cancellable == input.Cancellable ||
                    (this.Cancellable != null &&
                    this.Cancellable.Equals(input.Cancellable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransferId != null)
                    hashCode = hashCode * 59 + this.TransferId.GetHashCode();
                if (this.TransferDate != null)
                    hashCode = hashCode * 59 + this.TransferDate.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.SourceAccount != null)
                    hashCode = hashCode * 59 + this.SourceAccount.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Operation != null)
                    hashCode = hashCode * 59 + this.Operation.GetHashCode();
                if (this.Cancellable != null)
                    hashCode = hashCode * 59 + this.Cancellable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
