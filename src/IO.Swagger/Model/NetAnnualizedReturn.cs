/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NetAnnualizedReturn
    /// </summary>
    [DataContract]
    public partial class NetAnnualizedReturn :  IEquatable<NetAnnualizedReturn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetAnnualizedReturn" /> class.
        /// </summary>
        /// <param name="PrimaryNAR">Primary Net Annualized Return.</param>
        /// <param name="PrimaryAdjustedNAR">Primary Adjusted Net Annualized Return based on LendingClub&#39;s loss assumptions.</param>
        /// <param name="PrimaryUserAdjustedNAR">Primary Adjusted Net Annualized Return based on user&#39;s loss assumptions.</param>
        /// <param name="TradedNAR">Traded Net Annualized Return.</param>
        /// <param name="TradedAdjustedNAR">Traded Net Annualized Return based on LendingClub&#39;s loss assumptions.</param>
        /// <param name="TradedUserAdjustedNAR">Traded Adjusted Net Annualized Return based on user&#39;s loss assumptions.</param>
        /// <param name="CombinedNAR">Combined Net Annualized Return.</param>
        /// <param name="CombinedAdjustedNAR">Combined Net Annualized Return based on LendingClub&#39;s loss assumptions.</param>
        /// <param name="CombinedUserAdjustedNAR">Combined Net Annualized Return based on user&#39;s loss assumptions.</param>
        public NetAnnualizedReturn(decimal? PrimaryNAR = default(decimal?), decimal? PrimaryAdjustedNAR = default(decimal?), decimal? PrimaryUserAdjustedNAR = default(decimal?), decimal? TradedNAR = default(decimal?), decimal? TradedAdjustedNAR = default(decimal?), decimal? TradedUserAdjustedNAR = default(decimal?), decimal? CombinedNAR = default(decimal?), decimal? CombinedAdjustedNAR = default(decimal?), decimal? CombinedUserAdjustedNAR = default(decimal?))
        {
            this.PrimaryNAR = PrimaryNAR;
            this.PrimaryAdjustedNAR = PrimaryAdjustedNAR;
            this.PrimaryUserAdjustedNAR = PrimaryUserAdjustedNAR;
            this.TradedNAR = TradedNAR;
            this.TradedAdjustedNAR = TradedAdjustedNAR;
            this.TradedUserAdjustedNAR = TradedUserAdjustedNAR;
            this.CombinedNAR = CombinedNAR;
            this.CombinedAdjustedNAR = CombinedAdjustedNAR;
            this.CombinedUserAdjustedNAR = CombinedUserAdjustedNAR;
        }
        
        /// <summary>
        /// Primary Net Annualized Return
        /// </summary>
        /// <value>Primary Net Annualized Return</value>
        [DataMember(Name="primaryNAR", EmitDefaultValue=false)]
        public decimal? PrimaryNAR { get; set; }

        /// <summary>
        /// Primary Adjusted Net Annualized Return based on LendingClub&#39;s loss assumptions
        /// </summary>
        /// <value>Primary Adjusted Net Annualized Return based on LendingClub&#39;s loss assumptions</value>
        [DataMember(Name="primaryAdjustedNAR", EmitDefaultValue=false)]
        public decimal? PrimaryAdjustedNAR { get; set; }

        /// <summary>
        /// Primary Adjusted Net Annualized Return based on user&#39;s loss assumptions
        /// </summary>
        /// <value>Primary Adjusted Net Annualized Return based on user&#39;s loss assumptions</value>
        [DataMember(Name="primaryUserAdjustedNAR", EmitDefaultValue=false)]
        public decimal? PrimaryUserAdjustedNAR { get; set; }

        /// <summary>
        /// Traded Net Annualized Return
        /// </summary>
        /// <value>Traded Net Annualized Return</value>
        [DataMember(Name="tradedNAR", EmitDefaultValue=false)]
        public decimal? TradedNAR { get; set; }

        /// <summary>
        /// Traded Net Annualized Return based on LendingClub&#39;s loss assumptions
        /// </summary>
        /// <value>Traded Net Annualized Return based on LendingClub&#39;s loss assumptions</value>
        [DataMember(Name="tradedAdjustedNAR", EmitDefaultValue=false)]
        public decimal? TradedAdjustedNAR { get; set; }

        /// <summary>
        /// Traded Adjusted Net Annualized Return based on user&#39;s loss assumptions
        /// </summary>
        /// <value>Traded Adjusted Net Annualized Return based on user&#39;s loss assumptions</value>
        [DataMember(Name="tradedUserAdjustedNAR", EmitDefaultValue=false)]
        public decimal? TradedUserAdjustedNAR { get; set; }

        /// <summary>
        /// Combined Net Annualized Return
        /// </summary>
        /// <value>Combined Net Annualized Return</value>
        [DataMember(Name="combinedNAR", EmitDefaultValue=false)]
        public decimal? CombinedNAR { get; set; }

        /// <summary>
        /// Combined Net Annualized Return based on LendingClub&#39;s loss assumptions
        /// </summary>
        /// <value>Combined Net Annualized Return based on LendingClub&#39;s loss assumptions</value>
        [DataMember(Name="combinedAdjustedNAR", EmitDefaultValue=false)]
        public decimal? CombinedAdjustedNAR { get; set; }

        /// <summary>
        /// Combined Net Annualized Return based on user&#39;s loss assumptions
        /// </summary>
        /// <value>Combined Net Annualized Return based on user&#39;s loss assumptions</value>
        [DataMember(Name="combinedUserAdjustedNAR", EmitDefaultValue=false)]
        public decimal? CombinedUserAdjustedNAR { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetAnnualizedReturn {\n");
            sb.Append("  PrimaryNAR: ").Append(PrimaryNAR).Append("\n");
            sb.Append("  PrimaryAdjustedNAR: ").Append(PrimaryAdjustedNAR).Append("\n");
            sb.Append("  PrimaryUserAdjustedNAR: ").Append(PrimaryUserAdjustedNAR).Append("\n");
            sb.Append("  TradedNAR: ").Append(TradedNAR).Append("\n");
            sb.Append("  TradedAdjustedNAR: ").Append(TradedAdjustedNAR).Append("\n");
            sb.Append("  TradedUserAdjustedNAR: ").Append(TradedUserAdjustedNAR).Append("\n");
            sb.Append("  CombinedNAR: ").Append(CombinedNAR).Append("\n");
            sb.Append("  CombinedAdjustedNAR: ").Append(CombinedAdjustedNAR).Append("\n");
            sb.Append("  CombinedUserAdjustedNAR: ").Append(CombinedUserAdjustedNAR).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetAnnualizedReturn);
        }

        /// <summary>
        /// Returns true if NetAnnualizedReturn instances are equal
        /// </summary>
        /// <param name="input">Instance of NetAnnualizedReturn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetAnnualizedReturn input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrimaryNAR == input.PrimaryNAR ||
                    (this.PrimaryNAR != null &&
                    this.PrimaryNAR.Equals(input.PrimaryNAR))
                ) && 
                (
                    this.PrimaryAdjustedNAR == input.PrimaryAdjustedNAR ||
                    (this.PrimaryAdjustedNAR != null &&
                    this.PrimaryAdjustedNAR.Equals(input.PrimaryAdjustedNAR))
                ) && 
                (
                    this.PrimaryUserAdjustedNAR == input.PrimaryUserAdjustedNAR ||
                    (this.PrimaryUserAdjustedNAR != null &&
                    this.PrimaryUserAdjustedNAR.Equals(input.PrimaryUserAdjustedNAR))
                ) && 
                (
                    this.TradedNAR == input.TradedNAR ||
                    (this.TradedNAR != null &&
                    this.TradedNAR.Equals(input.TradedNAR))
                ) && 
                (
                    this.TradedAdjustedNAR == input.TradedAdjustedNAR ||
                    (this.TradedAdjustedNAR != null &&
                    this.TradedAdjustedNAR.Equals(input.TradedAdjustedNAR))
                ) && 
                (
                    this.TradedUserAdjustedNAR == input.TradedUserAdjustedNAR ||
                    (this.TradedUserAdjustedNAR != null &&
                    this.TradedUserAdjustedNAR.Equals(input.TradedUserAdjustedNAR))
                ) && 
                (
                    this.CombinedNAR == input.CombinedNAR ||
                    (this.CombinedNAR != null &&
                    this.CombinedNAR.Equals(input.CombinedNAR))
                ) && 
                (
                    this.CombinedAdjustedNAR == input.CombinedAdjustedNAR ||
                    (this.CombinedAdjustedNAR != null &&
                    this.CombinedAdjustedNAR.Equals(input.CombinedAdjustedNAR))
                ) && 
                (
                    this.CombinedUserAdjustedNAR == input.CombinedUserAdjustedNAR ||
                    (this.CombinedUserAdjustedNAR != null &&
                    this.CombinedUserAdjustedNAR.Equals(input.CombinedUserAdjustedNAR))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrimaryNAR != null)
                    hashCode = hashCode * 59 + this.PrimaryNAR.GetHashCode();
                if (this.PrimaryAdjustedNAR != null)
                    hashCode = hashCode * 59 + this.PrimaryAdjustedNAR.GetHashCode();
                if (this.PrimaryUserAdjustedNAR != null)
                    hashCode = hashCode * 59 + this.PrimaryUserAdjustedNAR.GetHashCode();
                if (this.TradedNAR != null)
                    hashCode = hashCode * 59 + this.TradedNAR.GetHashCode();
                if (this.TradedAdjustedNAR != null)
                    hashCode = hashCode * 59 + this.TradedAdjustedNAR.GetHashCode();
                if (this.TradedUserAdjustedNAR != null)
                    hashCode = hashCode * 59 + this.TradedUserAdjustedNAR.GetHashCode();
                if (this.CombinedNAR != null)
                    hashCode = hashCode * 59 + this.CombinedNAR.GetHashCode();
                if (this.CombinedAdjustedNAR != null)
                    hashCode = hashCode * 59 + this.CombinedAdjustedNAR.GetHashCode();
                if (this.CombinedUserAdjustedNAR != null)
                    hashCode = hashCode * 59 + this.CombinedUserAdjustedNAR.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
