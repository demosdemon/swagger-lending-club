/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SubmitOrderRequest
    /// </summary>
    [DataContract]
    public partial class SubmitOrderRequest :  IEquatable<SubmitOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmitOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitOrderRequest" /> class.
        /// </summary>
        /// <param name="Aid">The investor id (required).</param>
        /// <param name="Orders">Orders (required).</param>
        public SubmitOrderRequest(int? Aid = default(int?), List<NewOrder> Orders = default(List<NewOrder>))
        {
            // to ensure "Aid" is required (not null)
            if (Aid == null)
            {
                throw new InvalidDataException("Aid is a required property for SubmitOrderRequest and cannot be null");
            }
            else
            {
                this.Aid = Aid;
            }
            // to ensure "Orders" is required (not null)
            if (Orders == null)
            {
                throw new InvalidDataException("Orders is a required property for SubmitOrderRequest and cannot be null");
            }
            else
            {
                this.Orders = Orders;
            }
        }
        
        /// <summary>
        /// The investor id
        /// </summary>
        /// <value>The investor id</value>
        [DataMember(Name="aid", EmitDefaultValue=false)]
        public int? Aid { get; set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name="orders", EmitDefaultValue=false)]
        public List<NewOrder> Orders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmitOrderRequest {\n");
            sb.Append("  Aid: ").Append(Aid).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmitOrderRequest);
        }

        /// <summary>
        /// Returns true if SubmitOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmitOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmitOrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aid == input.Aid ||
                    (this.Aid != null &&
                    this.Aid.Equals(input.Aid))
                ) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aid != null)
                    hashCode = hashCode * 59 + this.Aid.GetHashCode();
                if (this.Orders != null)
                    hashCode = hashCode * 59 + this.Orders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
