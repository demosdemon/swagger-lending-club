/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BuyNote
    /// </summary>
    [DataContract]
    public partial class BuyNote :  IEquatable<BuyNote>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ExecutionStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecutionStatusEnum
        {
            
            /// <summary>
            /// Enum SUCCESSPENDINGSETTLEMENT for "SUCCESS_PENDING_SETTLEMENT"
            /// </summary>
            [EnumMember(Value = "SUCCESS_PENDING_SETTLEMENT")]
            SUCCESSPENDINGSETTLEMENT = 1,
            
            /// <summary>
            /// Enum NOTEALREADYOWNED for "NOTE_ALREADY_OWNED"
            /// </summary>
            [EnumMember(Value = "NOTE_ALREADY_OWNED")]
            NOTEALREADYOWNED = 2,
            
            /// <summary>
            /// Enum NOTEDATASTALE for "NOTE_DATA_STALE"
            /// </summary>
            [EnumMember(Value = "NOTE_DATA_STALE")]
            NOTEDATASTALE = 3,
            
            /// <summary>
            /// Enum NOTENOTAVAILABLE for "NOTE_NOT_AVAILABLE"
            /// </summary>
            [EnumMember(Value = "NOTE_NOT_AVAILABLE")]
            NOTENOTAVAILABLE = 4,
            
            /// <summary>
            /// Enum NOTEDOESNOTEXIST for "NOTE_DOES_NOT_EXIST"
            /// </summary>
            [EnumMember(Value = "NOTE_DOES_NOT_EXIST")]
            NOTEDOESNOTEXIST = 5,
            
            /// <summary>
            /// Enum INSUFFICIENTCASH for "INSUFFICIENT_CASH"
            /// </summary>
            [EnumMember(Value = "INSUFFICIENT_CASH")]
            INSUFFICIENTCASH = 6,
            
            /// <summary>
            /// Enum UNKNOWNERROR for "UNKNOWN_ERROR"
            /// </summary>
            [EnumMember(Value = "UNKNOWN_ERROR")]
            UNKNOWNERROR = 7
        }


        /// <summary>
        /// Gets or Sets ExecutionStatus
        /// </summary>
        [DataMember(Name="executionStatus", EmitDefaultValue=false)]
        public List<ExecutionStatusEnum> ExecutionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyNote" /> class.
        /// </summary>
        /// <param name="LoanId">LoanId.</param>
        /// <param name="OrderId">OrderId.</param>
        /// <param name="NoteId">NoteId.</param>
        /// <param name="BidPrice">BidPrice.</param>
        /// <param name="OutstandingPrincipal">OutstandingPrincipal.</param>
        /// <param name="YieldToMaturity">YieldToMaturity.</param>
        /// <param name="ExecutionStatus">ExecutionStatus.</param>
        public BuyNote(int? LoanId = default(int?), int? OrderId = default(int?), int? NoteId = default(int?), decimal? BidPrice = default(decimal?), decimal? OutstandingPrincipal = default(decimal?), decimal? YieldToMaturity = default(decimal?), List<ExecutionStatusEnum> ExecutionStatus = default(List<ExecutionStatusEnum>))
        {
            this.LoanId = LoanId;
            this.OrderId = OrderId;
            this.NoteId = NoteId;
            this.BidPrice = BidPrice;
            this.OutstandingPrincipal = OutstandingPrincipal;
            this.YieldToMaturity = YieldToMaturity;
            this.ExecutionStatus = ExecutionStatus;
        }
        
        /// <summary>
        /// Gets or Sets LoanId
        /// </summary>
        [DataMember(Name="loanId", EmitDefaultValue=false)]
        public int? LoanId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets NoteId
        /// </summary>
        [DataMember(Name="noteId", EmitDefaultValue=false)]
        public int? NoteId { get; set; }

        /// <summary>
        /// Gets or Sets BidPrice
        /// </summary>
        [DataMember(Name="bidPrice", EmitDefaultValue=false)]
        public decimal? BidPrice { get; set; }

        /// <summary>
        /// Gets or Sets OutstandingAccruedInterest
        /// </summary>
        [DataMember(Name="outstandingAccruedInterest", EmitDefaultValue=false)]
        public decimal? OutstandingAccruedInterest { get; private set; }

        /// <summary>
        /// Gets or Sets OutstandingPrincipal
        /// </summary>
        [DataMember(Name="outstandingPrincipal", EmitDefaultValue=false)]
        public decimal? OutstandingPrincipal { get; set; }

        /// <summary>
        /// Gets or Sets YieldToMaturity
        /// </summary>
        [DataMember(Name="yieldToMaturity", EmitDefaultValue=false)]
        public decimal? YieldToMaturity { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuyNote {\n");
            sb.Append("  LoanId: ").Append(LoanId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  NoteId: ").Append(NoteId).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  OutstandingAccruedInterest: ").Append(OutstandingAccruedInterest).Append("\n");
            sb.Append("  OutstandingPrincipal: ").Append(OutstandingPrincipal).Append("\n");
            sb.Append("  YieldToMaturity: ").Append(YieldToMaturity).Append("\n");
            sb.Append("  ExecutionStatus: ").Append(ExecutionStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuyNote);
        }

        /// <summary>
        /// Returns true if BuyNote instances are equal
        /// </summary>
        /// <param name="input">Instance of BuyNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuyNote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanId == input.LoanId ||
                    (this.LoanId != null &&
                    this.LoanId.Equals(input.LoanId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.NoteId == input.NoteId ||
                    (this.NoteId != null &&
                    this.NoteId.Equals(input.NoteId))
                ) && 
                (
                    this.BidPrice == input.BidPrice ||
                    (this.BidPrice != null &&
                    this.BidPrice.Equals(input.BidPrice))
                ) && 
                (
                    this.OutstandingAccruedInterest == input.OutstandingAccruedInterest ||
                    (this.OutstandingAccruedInterest != null &&
                    this.OutstandingAccruedInterest.Equals(input.OutstandingAccruedInterest))
                ) && 
                (
                    this.OutstandingPrincipal == input.OutstandingPrincipal ||
                    (this.OutstandingPrincipal != null &&
                    this.OutstandingPrincipal.Equals(input.OutstandingPrincipal))
                ) && 
                (
                    this.YieldToMaturity == input.YieldToMaturity ||
                    (this.YieldToMaturity != null &&
                    this.YieldToMaturity.Equals(input.YieldToMaturity))
                ) && 
                (
                    this.ExecutionStatus == input.ExecutionStatus ||
                    this.ExecutionStatus != null &&
                    this.ExecutionStatus.SequenceEqual(input.ExecutionStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanId != null)
                    hashCode = hashCode * 59 + this.LoanId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.NoteId != null)
                    hashCode = hashCode * 59 + this.NoteId.GetHashCode();
                if (this.BidPrice != null)
                    hashCode = hashCode * 59 + this.BidPrice.GetHashCode();
                if (this.OutstandingAccruedInterest != null)
                    hashCode = hashCode * 59 + this.OutstandingAccruedInterest.GetHashCode();
                if (this.OutstandingPrincipal != null)
                    hashCode = hashCode * 59 + this.OutstandingPrincipal.GetHashCode();
                if (this.YieldToMaturity != null)
                    hashCode = hashCode * 59 + this.YieldToMaturity.GetHashCode();
                if (this.ExecutionStatus != null)
                    hashCode = hashCode * 59 + this.ExecutionStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
