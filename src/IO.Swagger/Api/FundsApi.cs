/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ScheduledTransfer</returns>
        ScheduledTransfer FundsAdd (int? investor, ScheduledTransfer request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ScheduledTransfer</returns>
        ApiResponse<ScheduledTransfer> FundsAddWithHttpInfo (int? investor, ScheduledTransfer request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>CancelTransferResponse</returns>
        CancelTransferResponse FundsCancel (int? investor, CancelTransferRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of CancelTransferResponse</returns>
        ApiResponse<CancelTransferResponse> FundsCancelWithHttpInfo (int? investor, CancelTransferRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Transfers</returns>
        Transfers FundsPending (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of Transfers</returns>
        ApiResponse<Transfers> FundsPendingWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ScheduledTransfer</returns>
        ScheduledTransfer FundsWithdraw (int? investor, ScheduledTransfer request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ScheduledTransfer</returns>
        ApiResponse<ScheduledTransfer> FundsWithdrawWithHttpInfo (int? investor, ScheduledTransfer request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ScheduledTransfer</returns>
        System.Threading.Tasks.Task<ScheduledTransfer> FundsAddAsync (int? investor, ScheduledTransfer request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ScheduledTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTransfer>> FundsAddAsyncWithHttpInfo (int? investor, ScheduledTransfer request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of CancelTransferResponse</returns>
        System.Threading.Tasks.Task<CancelTransferResponse> FundsCancelAsync (int? investor, CancelTransferRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (CancelTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelTransferResponse>> FundsCancelAsyncWithHttpInfo (int? investor, CancelTransferRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of Transfers</returns>
        System.Threading.Tasks.Task<Transfers> FundsPendingAsync (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (Transfers)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transfers>> FundsPendingAsyncWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ScheduledTransfer</returns>
        System.Threading.Tasks.Task<ScheduledTransfer> FundsWithdrawAsync (int? investor, ScheduledTransfer request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ScheduledTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTransfer>> FundsWithdrawAsyncWithHttpInfo (int? investor, ScheduledTransfer request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FundsApi : IFundsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FundsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FundsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ScheduledTransfer</returns>
        public ScheduledTransfer FundsAdd (int? investor, ScheduledTransfer request)
        {
             ApiResponse<ScheduledTransfer> localVarResponse = FundsAddWithHttpInfo(investor, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ScheduledTransfer</returns>
        public ApiResponse< ScheduledTransfer > FundsAddWithHttpInfo (int? investor, ScheduledTransfer request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling FundsApi->FundsAdd");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling FundsApi->FundsAdd");

            var localVarPath = "/accounts/{investor}/funds/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledTransfer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledTransfer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ScheduledTransfer</returns>
        public async System.Threading.Tasks.Task<ScheduledTransfer> FundsAddAsync (int? investor, ScheduledTransfer request)
        {
             ApiResponse<ScheduledTransfer> localVarResponse = await FundsAddAsyncWithHttpInfo(investor, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ScheduledTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduledTransfer>> FundsAddAsyncWithHttpInfo (int? investor, ScheduledTransfer request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling FundsApi->FundsAdd");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling FundsApi->FundsAdd");

            var localVarPath = "/accounts/{investor}/funds/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledTransfer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledTransfer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>CancelTransferResponse</returns>
        public CancelTransferResponse FundsCancel (int? investor, CancelTransferRequest request)
        {
             ApiResponse<CancelTransferResponse> localVarResponse = FundsCancelWithHttpInfo(investor, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of CancelTransferResponse</returns>
        public ApiResponse< CancelTransferResponse > FundsCancelWithHttpInfo (int? investor, CancelTransferRequest request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling FundsApi->FundsCancel");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling FundsApi->FundsCancel");

            var localVarPath = "/accounts/{investor}/funds/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelTransferResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelTransferResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of CancelTransferResponse</returns>
        public async System.Threading.Tasks.Task<CancelTransferResponse> FundsCancelAsync (int? investor, CancelTransferRequest request)
        {
             ApiResponse<CancelTransferResponse> localVarResponse = await FundsCancelAsyncWithHttpInfo(investor, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (CancelTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelTransferResponse>> FundsCancelAsyncWithHttpInfo (int? investor, CancelTransferRequest request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling FundsApi->FundsCancel");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling FundsApi->FundsCancel");

            var localVarPath = "/accounts/{investor}/funds/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelTransferResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelTransferResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Transfers</returns>
        public Transfers FundsPending (int? investor)
        {
             ApiResponse<Transfers> localVarResponse = FundsPendingWithHttpInfo(investor);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of Transfers</returns>
        public ApiResponse< Transfers > FundsPendingWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling FundsApi->FundsPending");

            var localVarPath = "/accounts/{investor}/funds/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transfers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transfers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transfers)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of Transfers</returns>
        public async System.Threading.Tasks.Task<Transfers> FundsPendingAsync (int? investor)
        {
             ApiResponse<Transfers> localVarResponse = await FundsPendingAsyncWithHttpInfo(investor);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (Transfers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transfers>> FundsPendingAsyncWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling FundsApi->FundsPending");

            var localVarPath = "/accounts/{investor}/funds/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transfers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transfers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transfers)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ScheduledTransfer</returns>
        public ScheduledTransfer FundsWithdraw (int? investor, ScheduledTransfer request)
        {
             ApiResponse<ScheduledTransfer> localVarResponse = FundsWithdrawWithHttpInfo(investor, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ScheduledTransfer</returns>
        public ApiResponse< ScheduledTransfer > FundsWithdrawWithHttpInfo (int? investor, ScheduledTransfer request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling FundsApi->FundsWithdraw");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling FundsApi->FundsWithdraw");

            var localVarPath = "/accounts/{investor}/funds/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsWithdraw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledTransfer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledTransfer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ScheduledTransfer</returns>
        public async System.Threading.Tasks.Task<ScheduledTransfer> FundsWithdrawAsync (int? investor, ScheduledTransfer request)
        {
             ApiResponse<ScheduledTransfer> localVarResponse = await FundsWithdrawAsyncWithHttpInfo(investor, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ScheduledTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduledTransfer>> FundsWithdrawAsyncWithHttpInfo (int? investor, ScheduledTransfer request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling FundsApi->FundsWithdraw");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling FundsApi->FundsWithdraw");

            var localVarPath = "/accounts/{investor}/funds/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsWithdraw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledTransfer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledTransfer)));
        }

    }
}
