/* 
 * Lending Club API
 *
 * Lending Club API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>AvailableCash</returns>
        AvailableCash AvailableCash (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of AvailableCash</returns>
        ApiResponse<AvailableCash> AvailableCashWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Portfolio</returns>
        Portfolio CreatePortfolio (CreatePortfolioRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Portfolio</returns>
        ApiResponse<Portfolio> CreatePortfolioWithHttpInfo (CreatePortfolioRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="X_LC_DETAILED_NOTES_VERSION"> (optional)</param>
        /// <returns>DetailedNotesOwned</returns>
        DetailedNotesOwned DetailedNotesOwned (int? investor, string X_LC_DETAILED_NOTES_VERSION = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="X_LC_DETAILED_NOTES_VERSION"> (optional)</param>
        /// <returns>ApiResponse of DetailedNotesOwned</returns>
        ApiResponse<DetailedNotesOwned> DetailedNotesOwnedWithHttpInfo (int? investor, string X_LC_DETAILED_NOTES_VERSION = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>List&lt;Filter&gt;</returns>
        List<Filter> Filters (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of List&lt;Filter&gt;</returns>
        ApiResponse<List<Filter>> FiltersWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ScheduledTransfer</returns>
        ScheduledTransfer FundsAdd (int? investor, ScheduledTransfer request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ScheduledTransfer</returns>
        ApiResponse<ScheduledTransfer> FundsAddWithHttpInfo (int? investor, ScheduledTransfer request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>CancelTransferResponse</returns>
        CancelTransferResponse FundsCancel (int? investor, CancelTransferRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of CancelTransferResponse</returns>
        ApiResponse<CancelTransferResponse> FundsCancelWithHttpInfo (int? investor, CancelTransferRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Transfers</returns>
        Transfers FundsPending (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of Transfers</returns>
        ApiResponse<Transfers> FundsPendingWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ScheduledTransfer</returns>
        ScheduledTransfer FundsWithdraw (int? investor, ScheduledTransfer request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ScheduledTransfer</returns>
        ApiResponse<ScheduledTransfer> FundsWithdrawWithHttpInfo (int? investor, ScheduledTransfer request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>NotesOwned</returns>
        NotesOwned NotesOwned (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of NotesOwned</returns>
        ApiResponse<NotesOwned> NotesOwnedWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>PortfoliosOwned</returns>
        PortfoliosOwned PortfoliosOwned (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of PortfoliosOwned</returns>
        ApiResponse<PortfoliosOwned> PortfoliosOwnedWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="orders"></param>
        /// <returns>SubmitOrderResponse</returns>
        SubmitOrderResponse SubmitOrder (int? investor, SubmitOrderRequest orders);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="orders"></param>
        /// <returns>ApiResponse of SubmitOrderResponse</returns>
        ApiResponse<SubmitOrderResponse> SubmitOrderWithHttpInfo (int? investor, SubmitOrderRequest orders);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>AccountSummary</returns>
        AccountSummary Summary (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of AccountSummary</returns>
        ApiResponse<AccountSummary> SummaryWithHttpInfo (int? investor);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of AvailableCash</returns>
        System.Threading.Tasks.Task<AvailableCash> AvailableCashAsync (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (AvailableCash)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableCash>> AvailableCashAsyncWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of Portfolio</returns>
        System.Threading.Tasks.Task<Portfolio> CreatePortfolioAsync (CreatePortfolioRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portfolio>> CreatePortfolioAsyncWithHttpInfo (CreatePortfolioRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="X_LC_DETAILED_NOTES_VERSION"> (optional)</param>
        /// <returns>Task of DetailedNotesOwned</returns>
        System.Threading.Tasks.Task<DetailedNotesOwned> DetailedNotesOwnedAsync (int? investor, string X_LC_DETAILED_NOTES_VERSION = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="X_LC_DETAILED_NOTES_VERSION"> (optional)</param>
        /// <returns>Task of ApiResponse (DetailedNotesOwned)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedNotesOwned>> DetailedNotesOwnedAsyncWithHttpInfo (int? investor, string X_LC_DETAILED_NOTES_VERSION = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of List&lt;Filter&gt;</returns>
        System.Threading.Tasks.Task<List<Filter>> FiltersAsync (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (List&lt;Filter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Filter>>> FiltersAsyncWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ScheduledTransfer</returns>
        System.Threading.Tasks.Task<ScheduledTransfer> FundsAddAsync (int? investor, ScheduledTransfer request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ScheduledTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTransfer>> FundsAddAsyncWithHttpInfo (int? investor, ScheduledTransfer request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of CancelTransferResponse</returns>
        System.Threading.Tasks.Task<CancelTransferResponse> FundsCancelAsync (int? investor, CancelTransferRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (CancelTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelTransferResponse>> FundsCancelAsyncWithHttpInfo (int? investor, CancelTransferRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of Transfers</returns>
        System.Threading.Tasks.Task<Transfers> FundsPendingAsync (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (Transfers)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transfers>> FundsPendingAsyncWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ScheduledTransfer</returns>
        System.Threading.Tasks.Task<ScheduledTransfer> FundsWithdrawAsync (int? investor, ScheduledTransfer request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ScheduledTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledTransfer>> FundsWithdrawAsyncWithHttpInfo (int? investor, ScheduledTransfer request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of NotesOwned</returns>
        System.Threading.Tasks.Task<NotesOwned> NotesOwnedAsync (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (NotesOwned)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotesOwned>> NotesOwnedAsyncWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of PortfoliosOwned</returns>
        System.Threading.Tasks.Task<PortfoliosOwned> PortfoliosOwnedAsync (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (PortfoliosOwned)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfoliosOwned>> PortfoliosOwnedAsyncWithHttpInfo (int? investor);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="orders"></param>
        /// <returns>Task of SubmitOrderResponse</returns>
        System.Threading.Tasks.Task<SubmitOrderResponse> SubmitOrderAsync (int? investor, SubmitOrderRequest orders);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="orders"></param>
        /// <returns>Task of ApiResponse (SubmitOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmitOrderResponse>> SubmitOrderAsyncWithHttpInfo (int? investor, SubmitOrderRequest orders);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of AccountSummary</returns>
        System.Threading.Tasks.Task<AccountSummary> SummaryAsync (int? investor);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (AccountSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSummary>> SummaryAsyncWithHttpInfo (int? investor);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>AvailableCash</returns>
        public AvailableCash AvailableCash (int? investor)
        {
             ApiResponse<AvailableCash> localVarResponse = AvailableCashWithHttpInfo(investor);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of AvailableCash</returns>
        public ApiResponse< AvailableCash > AvailableCashWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->AvailableCash");

            var localVarPath = "/accounts/{investor}/availablecash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailableCash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AvailableCash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AvailableCash) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AvailableCash)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of AvailableCash</returns>
        public async System.Threading.Tasks.Task<AvailableCash> AvailableCashAsync (int? investor)
        {
             ApiResponse<AvailableCash> localVarResponse = await AvailableCashAsyncWithHttpInfo(investor);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (AvailableCash)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AvailableCash>> AvailableCashAsyncWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->AvailableCash");

            var localVarPath = "/accounts/{investor}/availablecash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailableCash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AvailableCash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AvailableCash) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AvailableCash)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Portfolio</returns>
        public Portfolio CreatePortfolio (CreatePortfolioRequest request)
        {
             ApiResponse<Portfolio> localVarResponse = CreatePortfolioWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Portfolio</returns>
        public ApiResponse< Portfolio > CreatePortfolioWithHttpInfo (CreatePortfolioRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->CreatePortfolio");

            var localVarPath = "/accounts/{investor}/portfolios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portfolio) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of Portfolio</returns>
        public async System.Threading.Tasks.Task<Portfolio> CreatePortfolioAsync (CreatePortfolioRequest request)
        {
             ApiResponse<Portfolio> localVarResponse = await CreatePortfolioAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portfolio>> CreatePortfolioAsyncWithHttpInfo (CreatePortfolioRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->CreatePortfolio");

            var localVarPath = "/accounts/{investor}/portfolios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portfolio) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="X_LC_DETAILED_NOTES_VERSION"> (optional)</param>
        /// <returns>DetailedNotesOwned</returns>
        public DetailedNotesOwned DetailedNotesOwned (int? investor, string X_LC_DETAILED_NOTES_VERSION = null)
        {
             ApiResponse<DetailedNotesOwned> localVarResponse = DetailedNotesOwnedWithHttpInfo(investor, X_LC_DETAILED_NOTES_VERSION);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="X_LC_DETAILED_NOTES_VERSION"> (optional)</param>
        /// <returns>ApiResponse of DetailedNotesOwned</returns>
        public ApiResponse< DetailedNotesOwned > DetailedNotesOwnedWithHttpInfo (int? investor, string X_LC_DETAILED_NOTES_VERSION = null)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->DetailedNotesOwned");

            var localVarPath = "/accounts/{investor}/detailednotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (X_LC_DETAILED_NOTES_VERSION != null) localVarHeaderParams.Add("X-LC-DETAILED-NOTES-VERSION", Configuration.ApiClient.ParameterToString(X_LC_DETAILED_NOTES_VERSION)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetailedNotesOwned", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedNotesOwned>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedNotesOwned) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedNotesOwned)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="X_LC_DETAILED_NOTES_VERSION"> (optional)</param>
        /// <returns>Task of DetailedNotesOwned</returns>
        public async System.Threading.Tasks.Task<DetailedNotesOwned> DetailedNotesOwnedAsync (int? investor, string X_LC_DETAILED_NOTES_VERSION = null)
        {
             ApiResponse<DetailedNotesOwned> localVarResponse = await DetailedNotesOwnedAsyncWithHttpInfo(investor, X_LC_DETAILED_NOTES_VERSION);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="X_LC_DETAILED_NOTES_VERSION"> (optional)</param>
        /// <returns>Task of ApiResponse (DetailedNotesOwned)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedNotesOwned>> DetailedNotesOwnedAsyncWithHttpInfo (int? investor, string X_LC_DETAILED_NOTES_VERSION = null)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->DetailedNotesOwned");

            var localVarPath = "/accounts/{investor}/detailednotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (X_LC_DETAILED_NOTES_VERSION != null) localVarHeaderParams.Add("X-LC-DETAILED-NOTES-VERSION", Configuration.ApiClient.ParameterToString(X_LC_DETAILED_NOTES_VERSION)); // header parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetailedNotesOwned", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedNotesOwned>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetailedNotesOwned) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedNotesOwned)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>List&lt;Filter&gt;</returns>
        public List<Filter> Filters (int? investor)
        {
             ApiResponse<List<Filter>> localVarResponse = FiltersWithHttpInfo(investor);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of List&lt;Filter&gt;</returns>
        public ApiResponse< List<Filter> > FiltersWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->Filters");

            var localVarPath = "/accounts/{investor}/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Filters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Filter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Filter>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Filter>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of List&lt;Filter&gt;</returns>
        public async System.Threading.Tasks.Task<List<Filter>> FiltersAsync (int? investor)
        {
             ApiResponse<List<Filter>> localVarResponse = await FiltersAsyncWithHttpInfo(investor);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (List&lt;Filter&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Filter>>> FiltersAsyncWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->Filters");

            var localVarPath = "/accounts/{investor}/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Filters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Filter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Filter>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Filter>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ScheduledTransfer</returns>
        public ScheduledTransfer FundsAdd (int? investor, ScheduledTransfer request)
        {
             ApiResponse<ScheduledTransfer> localVarResponse = FundsAddWithHttpInfo(investor, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ScheduledTransfer</returns>
        public ApiResponse< ScheduledTransfer > FundsAddWithHttpInfo (int? investor, ScheduledTransfer request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->FundsAdd");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->FundsAdd");

            var localVarPath = "/accounts/{investor}/funds/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledTransfer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledTransfer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ScheduledTransfer</returns>
        public async System.Threading.Tasks.Task<ScheduledTransfer> FundsAddAsync (int? investor, ScheduledTransfer request)
        {
             ApiResponse<ScheduledTransfer> localVarResponse = await FundsAddAsyncWithHttpInfo(investor, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ScheduledTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduledTransfer>> FundsAddAsyncWithHttpInfo (int? investor, ScheduledTransfer request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->FundsAdd");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->FundsAdd");

            var localVarPath = "/accounts/{investor}/funds/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledTransfer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledTransfer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>CancelTransferResponse</returns>
        public CancelTransferResponse FundsCancel (int? investor, CancelTransferRequest request)
        {
             ApiResponse<CancelTransferResponse> localVarResponse = FundsCancelWithHttpInfo(investor, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of CancelTransferResponse</returns>
        public ApiResponse< CancelTransferResponse > FundsCancelWithHttpInfo (int? investor, CancelTransferRequest request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->FundsCancel");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->FundsCancel");

            var localVarPath = "/accounts/{investor}/funds/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelTransferResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelTransferResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of CancelTransferResponse</returns>
        public async System.Threading.Tasks.Task<CancelTransferResponse> FundsCancelAsync (int? investor, CancelTransferRequest request)
        {
             ApiResponse<CancelTransferResponse> localVarResponse = await FundsCancelAsyncWithHttpInfo(investor, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (CancelTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelTransferResponse>> FundsCancelAsyncWithHttpInfo (int? investor, CancelTransferRequest request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->FundsCancel");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->FundsCancel");

            var localVarPath = "/accounts/{investor}/funds/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CancelTransferResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelTransferResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Transfers</returns>
        public Transfers FundsPending (int? investor)
        {
             ApiResponse<Transfers> localVarResponse = FundsPendingWithHttpInfo(investor);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of Transfers</returns>
        public ApiResponse< Transfers > FundsPendingWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->FundsPending");

            var localVarPath = "/accounts/{investor}/funds/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transfers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transfers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transfers)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of Transfers</returns>
        public async System.Threading.Tasks.Task<Transfers> FundsPendingAsync (int? investor)
        {
             ApiResponse<Transfers> localVarResponse = await FundsPendingAsyncWithHttpInfo(investor);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (Transfers)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transfers>> FundsPendingAsyncWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->FundsPending");

            var localVarPath = "/accounts/{investor}/funds/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transfers>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transfers) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transfers)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ScheduledTransfer</returns>
        public ScheduledTransfer FundsWithdraw (int? investor, ScheduledTransfer request)
        {
             ApiResponse<ScheduledTransfer> localVarResponse = FundsWithdrawWithHttpInfo(investor, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ScheduledTransfer</returns>
        public ApiResponse< ScheduledTransfer > FundsWithdrawWithHttpInfo (int? investor, ScheduledTransfer request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->FundsWithdraw");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->FundsWithdraw");

            var localVarPath = "/accounts/{investor}/funds/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsWithdraw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledTransfer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledTransfer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ScheduledTransfer</returns>
        public async System.Threading.Tasks.Task<ScheduledTransfer> FundsWithdrawAsync (int? investor, ScheduledTransfer request)
        {
             ApiResponse<ScheduledTransfer> localVarResponse = await FundsWithdrawAsyncWithHttpInfo(investor, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ScheduledTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduledTransfer>> FundsWithdrawAsyncWithHttpInfo (int? investor, ScheduledTransfer request)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->FundsWithdraw");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AccountsApi->FundsWithdraw");

            var localVarPath = "/accounts/{investor}/funds/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FundsWithdraw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledTransfer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledTransfer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>NotesOwned</returns>
        public NotesOwned NotesOwned (int? investor)
        {
             ApiResponse<NotesOwned> localVarResponse = NotesOwnedWithHttpInfo(investor);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of NotesOwned</returns>
        public ApiResponse< NotesOwned > NotesOwnedWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->NotesOwned");

            var localVarPath = "/accounts/{investor}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotesOwned", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotesOwned>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotesOwned) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotesOwned)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of NotesOwned</returns>
        public async System.Threading.Tasks.Task<NotesOwned> NotesOwnedAsync (int? investor)
        {
             ApiResponse<NotesOwned> localVarResponse = await NotesOwnedAsyncWithHttpInfo(investor);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (NotesOwned)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotesOwned>> NotesOwnedAsyncWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->NotesOwned");

            var localVarPath = "/accounts/{investor}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotesOwned", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotesOwned>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotesOwned) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotesOwned)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>PortfoliosOwned</returns>
        public PortfoliosOwned PortfoliosOwned (int? investor)
        {
             ApiResponse<PortfoliosOwned> localVarResponse = PortfoliosOwnedWithHttpInfo(investor);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of PortfoliosOwned</returns>
        public ApiResponse< PortfoliosOwned > PortfoliosOwnedWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->PortfoliosOwned");

            var localVarPath = "/accounts/{investor}/portfolios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfoliosOwned", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfoliosOwned>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfoliosOwned) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfoliosOwned)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of PortfoliosOwned</returns>
        public async System.Threading.Tasks.Task<PortfoliosOwned> PortfoliosOwnedAsync (int? investor)
        {
             ApiResponse<PortfoliosOwned> localVarResponse = await PortfoliosOwnedAsyncWithHttpInfo(investor);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (PortfoliosOwned)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfoliosOwned>> PortfoliosOwnedAsyncWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->PortfoliosOwned");

            var localVarPath = "/accounts/{investor}/portfolios";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfoliosOwned", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfoliosOwned>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfoliosOwned) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfoliosOwned)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="orders"></param>
        /// <returns>SubmitOrderResponse</returns>
        public SubmitOrderResponse SubmitOrder (int? investor, SubmitOrderRequest orders)
        {
             ApiResponse<SubmitOrderResponse> localVarResponse = SubmitOrderWithHttpInfo(investor, orders);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="orders"></param>
        /// <returns>ApiResponse of SubmitOrderResponse</returns>
        public ApiResponse< SubmitOrderResponse > SubmitOrderWithHttpInfo (int? investor, SubmitOrderRequest orders)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->SubmitOrder");
            // verify the required parameter 'orders' is set
            if (orders == null)
                throw new ApiException(400, "Missing required parameter 'orders' when calling AccountsApi->SubmitOrder");

            var localVarPath = "/accounts/{investor}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (orders != null && orders.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(orders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orders; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmitOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmitOrderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmitOrderResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="orders"></param>
        /// <returns>Task of SubmitOrderResponse</returns>
        public async System.Threading.Tasks.Task<SubmitOrderResponse> SubmitOrderAsync (int? investor, SubmitOrderRequest orders)
        {
             ApiResponse<SubmitOrderResponse> localVarResponse = await SubmitOrderAsyncWithHttpInfo(investor, orders);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <param name="orders"></param>
        /// <returns>Task of ApiResponse (SubmitOrderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmitOrderResponse>> SubmitOrderAsyncWithHttpInfo (int? investor, SubmitOrderRequest orders)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->SubmitOrder");
            // verify the required parameter 'orders' is set
            if (orders == null)
                throw new ApiException(400, "Missing required parameter 'orders' when calling AccountsApi->SubmitOrder");

            var localVarPath = "/accounts/{investor}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter
            if (orders != null && orders.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(orders); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orders; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmitOrderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubmitOrderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmitOrderResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>AccountSummary</returns>
        public AccountSummary Summary (int? investor)
        {
             ApiResponse<AccountSummary> localVarResponse = SummaryWithHttpInfo(investor);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>ApiResponse of AccountSummary</returns>
        public ApiResponse< AccountSummary > SummaryWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->Summary");

            var localVarPath = "/accounts/{investor}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Summary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of AccountSummary</returns>
        public async System.Threading.Tasks.Task<AccountSummary> SummaryAsync (int? investor)
        {
             ApiResponse<AccountSummary> localVarResponse = await SummaryAsyncWithHttpInfo(investor);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="investor"></param>
        /// <returns>Task of ApiResponse (AccountSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountSummary>> SummaryAsyncWithHttpInfo (int? investor)
        {
            // verify the required parameter 'investor' is set
            if (investor == null)
                throw new ApiException(400, "Missing required parameter 'investor' when calling AccountsApi->Summary");

            var localVarPath = "/accounts/{investor}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (investor != null) localVarPathParams.Add("investor", Configuration.ApiClient.ParameterToString(investor)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Summary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountSummary)));
        }

    }
}
